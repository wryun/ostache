[
  {
    "desc": "passes through normal objects unchanged",
    "template": "x",
    "parameters": {"x": 1},
    "result": "x"
  },
  {
    "desc": "substitute at top-level",
    "template": "((x))",
    "parameters": {"x": 1},
    "result": 1
  },
  {
    "desc": "substitute if true",
    "template": {
      "((#x))": "hello",
      "((^x))": "blah"
    },
    "parameters": {"x": 1},
    "result": "hello"
  },
  {
    "desc": "iterates over templated array",
    "template": {
      "((#x))": ["((a))", "((y))"]
    },
    "parameters": {"y": 0, "x": [{"a": 1}, {"a": 2}, {"a": 3}]},
    "result": [[1, 0], [2, 0], [3, 0]]
  },
  {
    "desc": "string templating",
    "template": "I am NOT a ((a))",
    "parameters": {"a": "computer"},
    "result": "I am NOT a computer"
  },
  {
    "desc": "string templating",
    "template": "I am NOT a ((#a))string((/a))",
    "parameters": {"a": "computer"},
    "result": "I am NOT a string"
  },
  {
    "desc": "string templating",
    "template": "I am NOT a ((#a))((foo))((/a)) now",
    "parameters": {"a": {"foo": "template"}},
    "result": "I am NOT a template now"
  },
  {
    "desc": "string templating",
    "template": "I am NOT a ((#a))((#c))((b))((/c))((/a))",
    "parameters": {"a": {"b": "recursivelookup", "c": true}},
    "result": "I am NOT a recursivelookup"
  }
]
